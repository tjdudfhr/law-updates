import requests
import pandas as pd
from datetime import datetime, timedelta
import time
import xml.etree.ElementTree as ET
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment
import json

class LawDataExtractor:
    def __init__(self, oc_key="knowhow1"):
        self.base_url = "http://www.law.go.kr/DRF/lawService.do"
        self.oc_key = oc_key
        self.all_data = []
        
    def calculate_date_range(self, years_back=25, years_forward=25):
        """25년 전후 날짜 범위 계산"""
        today = datetime.now()
        start_date = (today - timedelta(days=365 * years_back)).strftime("%Y%m%d")
        end_date = (today + timedelta(days=365 * years_forward)).strftime("%Y%m%d")
        return start_date, end_date
    
    def fetch_law_data(self, page=1, display=100, start_date=None, end_date=None):
        """API를 통해 법령 데이터 조회"""
        if not start_date or not end_date:
            start_date, end_date = self.calculate_date_range()
        
        params = {
            'OC': self.oc_key,
            'target': 'eflaw',
            'type': 'JSON',
            'efYd': f"{start_date}~{end_date}",
            'display': display,
            'page': page,
            'sort': 'efasc'
        }
        
        try:
            response = requests.get(self.base_url, params=params, timeout=30)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"API 요청 오류 (페이지 {page}): {e}")
            return None
        except json.JSONDecodeError as e:
            print(f"JSON 파싱 오류 (페이지 {page}): {e}")
            return None
    
    def extract_all_data(self):
        """모든 페이지의 데이터 추출"""
        print("데이터 추출을 시작합니다...")
        start_date, end_date = self.calculate_date_range()
        print(f"검색 기간: {start_date[:4]}-{start_date[4:6]}-{start_date[6:]} ~ {end_date[:4]}-{end_date[4:6]}-{end_date[6:]}")
        
        page = 1
        total_count = 0
        
        while True:
            print(f"페이지 {page} 데이터 조회 중...")
            data = self.fetch_law_data(page=page, start_date=start_date, end_date=end_date)
            
            if not data:
                break
            
            # API 응답 구조에 따라 수정 필요
            try:
                # 일반적인 API 응답 구조
                if 'LawSearch' in data:
                    laws = data['LawSearch'].get('law', [])
                    if not isinstance(laws, list):
                        laws = [laws]
                elif 'laws' in data:
                    laws = data['laws']
                elif 'list' in data:
                    laws = data['list']
                else:
                    # 직접 리스트인 경우
                    laws = data if isinstance(data, list) else []
                
                if not laws:
                    print(f"페이지 {page}에 더 이상 데이터가 없습니다.")
                    break
                
                self.all_data.extend(laws)
                total_count += len(laws)
                print(f"  - {len(laws)}개 법령 추출 완료 (누적: {total_count}개)")
                
                # API 호출 간격 (서버 부하 방지)
                time.sleep(0.5)
                
                # 다음 페이지로
                if len(laws) < 100:  # 마지막 페이지인 경우
                    break
                page += 1
                
            except Exception as e:
                print(f"데이터 처리 오류: {e}")
                break
        
        print(f"\n총 {total_count}개의 법령 데이터 추출 완료!")
        return self.all_data
    
    def process_data(self, data):
        """데이터를 DataFrame으로 변환"""
        processed_data = []
        
        for item in data:
            # API 응답 구조에 따라 필드명 수정 필요
            processed_item = {
                '법령일련번호': item.get('법령일련번호', ''),
                '법령명': item.get('법령명한글', item.get('법령명', '')),
                '법령약칭명': item.get('법령약칭명', ''),
                '법령종류': self.get_law_type(item.get('법령구분', item.get('법령종류코드', ''))),
                '공포일자': self.format_date(item.get('공포일자', '')),
                '공포번호': item.get('공포번호', ''),
                '시행일자': self.format_date(item.get('시행일자', '')),
                '제개정구분': item.get('제개정구분', ''),
                '소관부처': item.get('소관부처명', item.get('소관부처', '')),
                '법령상태': item.get('법령상태', '현행'),
                '링크': item.get('법령상세링크', '')
            }
            processed_data.append(processed_item)
        
        return pd.DataFrame(processed_data)
    
    def get_law_type(self, type_code):
        """법령 종류 코드를 한글명으로 변환"""
        type_map = {
            '01': '법률',
            '02': '대통령령',
            '03': '총리령',
            '04': '부령',
            '05': '대통령훈령',
            '06': '총리훈령',
            '07': '부령훈령',
            '11': '규칙',
            '12': '고시',
            '13': '예규',
            '14': '훈령',
            '15': '지침'
        }
        return type_map.get(str(type_code), type_code)
    
    def format_date(self, date_str):
        """날짜 형식 변환 (YYYYMMDD -> YYYY-MM-DD)"""
        if date_str and len(date_str) == 8:
            return f"{date_str[:4]}-{date_str[4:6]}-{date_str[6:]}"
        return date_str
    
    def save_to_excel(self, df, filename=None):
        """DataFrame을 엑셀 파일로 저장"""
        if filename is None:
            filename = f"법령데이터_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        # 엑셀 Writer 생성
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            # 전체 데이터 시트
            df.to_excel(writer, sheet_name='전체법령', index=False)
            
            # 법령 종류별 시트 생성
            for law_type in df['법령종류'].unique():
                if law_type:  # 비어있지 않은 경우만
                    type_df = df[df['법령종류'] == law_type]
                    sheet_name = f"{law_type[:15]}"  # 시트명 길이 제한
                    type_df.to_excel(writer, sheet_name=sheet_name, index=False)
            
            # 스타일 적용
            workbook = writer.book
            for sheet_name in workbook.sheetnames:
                worksheet = workbook[sheet_name]
                
                # 헤더 스타일
                header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                header_font = Font(color="FFFFFF", bold=True)
                
                for cell in worksheet[1]:
                    cell.fill = header_fill
                    cell.font = header_font
                    cell.alignment = Alignment(horizontal="center", vertical="center")
                
                # 열 너비 자동 조정
                for column in worksheet.columns:
                    max_length = 0
                    column = [cell for cell in column]
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 50)
                    worksheet.column_dimensions[column[0].column_letter].width = adjusted_width
        
        print(f"\n엑셀 파일 저장 완료: {filename}")
        return filename
    
    def create_summary(self, df):
        """데이터 요약 정보 생성"""
        summary = {
            '총 법령 수': len(df),
            '법령 종류별 개수': df['법령종류'].value_counts().to_dict(),
            '소관부처별 개수': df['소관부처'].value_counts().head(10).to_dict(),
            '제개정구분별 개수': df['제개정구분'].value_counts().to_dict(),
            '최근 시행일': df['시행일자'].max(),
            '가장 오래된 시행일': df['시행일자'].min()
        }
        return summary

def main():
    """메인 실행 함수"""
    print("=" * 50)
    print("국가법령정보센터 데이터 추출 프로그램")
    print("=" * 50)
    
    # 추출기 인스턴스 생성
    extractor = LawDataExtractor(oc_key="knowhow1")
    
    # 데이터 추출
    all_data = extractor.extract_all_data()
    
    if not all_data:
        print("추출된 데이터가 없습니다.")
        return
    
    # 데이터 처리
    df = extractor.process_data(all_data)
    
    # 요약 정보 출력
    print("\n" + "=" * 50)
    print("데이터 요약")
    print("=" * 50)
    summary = extractor.create_summary(df)
    for key, value in summary.items():
        if isinstance(value, dict):
            print(f"\n{key}:")
            for k, v in value.items():
                print(f"  - {k}: {v}개")
        else:
            print(f"{key}: {value}")
    
    # 엑셀 파일로 저장
    filename = extractor.save_to_excel(df)
    
    # 추가 필터링 옵션
    print("\n" + "=" * 50)
    print("추가 필터링 옵션")
    print("=" * 50)
    
    # 예: 2024년 시행 법령만 필터링
    df_2024 = df[df['시행일자'].str.startswith('2024')]
    if not df_2024.empty:
        filename_2024 = f"법령데이터_2024년시행_{datetime.now().strftime('%Y%m%d')}.xlsx"
        extractor.save_to_excel(df_2024, filename_2024)
        print(f"2024년 시행 법령: {len(df_2024)}개")

if __name__ == "__main__":
    # 필요한 라이브러리 설치 안내
    print("\n필요한 라이브러리:")
    print("pip install requests pandas openpyxl")
    print("\n")
    
    try:
        main()
    except Exception as e:
        print(f"\n오류 발생: {e}")
        import traceback
        traceback.print_exc()
